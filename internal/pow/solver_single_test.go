package pow_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"faraway/internal/pow"
)

func TestSolverSingle_SolveChallenge(t *testing.T) {
	verifier := pow.NewVerifier()
	solver := pow.NewSolverSingle()

	randomData := [32]byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	}

	randomData00 := [32]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	randomDataFF := [32]byte{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}

	testCases := []struct {
		name      string
		challenge pow.Challenge
	}{
		{name: "difficulty 0", challenge: pow.Challenge{Difficulty: 0, RandomData: randomData}},
		{name: "difficulty 1", challenge: pow.Challenge{Difficulty: 1, RandomData: randomData}},
		{name: "difficulty 10", challenge: pow.Challenge{Difficulty: 10, RandomData: randomData}},
		{name: "difficulty 20", challenge: pow.Challenge{Difficulty: 20, RandomData: randomData}},
		{name: "difficulty 22", challenge: pow.Challenge{Difficulty: 22, RandomData: randomData}},
		{name: "challenge 0x00", challenge: pow.Challenge{Difficulty: 10, RandomData: randomData00}},
		{name: "challenge 0xFF", challenge: pow.Challenge{Difficulty: 10, RandomData: randomDataFF}},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			nonce, err := solver.SolveChallenge(tc.challenge)
			require.NoError(t, err)
			assert.True(t, verifier.VerifySolution(tc.challenge, nonce))
		})
	}
}

func BenchmarkSolverSingle_SolveChallenge(b *testing.B) {
	solver := pow.NewSolverSingle()

	challenge := pow.Challenge{
		Difficulty: 24,
		RandomData: [32]byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		},
	}

	for b.Loop() {
		if _, err := solver.SolveChallenge(challenge); err != nil {
			b.Fatal(err)
		}
	}
}
